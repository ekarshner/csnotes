8 May 2018

Compiler Parts:

Name              Input                     Output
Lexer             source code (text)        token list

Lexer
  -Reads in source code and outputs a token list
    -tools: C - lex, flex
            java - javacc

26-27 Apr 2018
Lighting
  -Realistic lighting models find color based on:
    -Color, intensity, and location of light (sources)
    -Reflective properties of objects

  Two kinds of light in our images:
    -Ambient light
      'background light' - no defined source, comes from everywhere evenly
    -Point light sources
      Come from a distinct origin
      Represented by color and location

  Phong Reflection Model
    -Models realistic reflections by breaking reflection into 3 parts:
      Ambient, diffuse, specular
        I = Ambient + diffuse + specular [diffuse and specular represent point light] = AKa + PKd(L⋅N)
        Ambient:
          -A: Ambient light value (0-255)
          -Ka: Constant of ambient reflection (0-1)
          Ambient = AKa
        Diffuse:
          -Reflection of a point light source
          -Reflected in all directions evenly (anything that is not shiny does this)
          -P: Color of the point light source
          -Kd: Constant of diffuse reflection
          Diffuse reflection can be simulated by cosϑ
            Cosϑ = L ⋅ N
            Diffuse = PKd(L⋅N)
        Specular Reflection:
          -Reflection of a point light source in a specific direction
          -Models glossy/shiny surfaces
          -Ks: Constant of specular reflection
          -P: Color of point light
          cosα = R[reflection vector] ⋅ V[vision vector]
          cosϑ [angle of reflection] = ||T||
          R = 2(N⋅L)N - L
          Specular = PKs[(2(N⋅L)N - L)]^x[simulate narrow reflection]

19 Apr 2018
Z-Buffer
  -Z-buffer is a 2D array of floating point values that directly corresponds to the screen
  -Before modifying the screen, we will check the z-buffer
  -Z values should be initialized to be the lowest possible value

  Things to change:
    Plot must check/modify the z-buffer
    Drawline must calculate z values
    scanline convert must calculate z values

18 Apr 2018
Scanline Filling/Conversion
  -Draw horizontal lines to fill triangles
  -Have bottom, top, middle points
    ybottom, ymiddle, ytop
    xbottom, xmiddle, xtop

  Y: ybottom -> ytop; y+=1
  X:
    x+=Δ0
      Δ0 = (xtop - xbottom) / (ytop - ybottom)
  X1: on the line bottom,middle until y = ymiddle, then on the line middle,top
    x+=Δ1
      Δ1 = (xmiddle - xbottom) / (ymiddle - ybottom)
      OR
      Δ1 = (xtop - xmiddle) / (ytop - ymiddle)
      ***MAKE SURE THAT YOU'RE NOT DIVIDING BY ZERO -- if either (ymiddle-ybottom) or (ytop - ymiddle) == 0, then don't run your code


12 Apr 2018
Coordinate System Stack
  -We will maintain a stack of coordinate systems
  -The top will be the current coordinate system
  -The bottom will always be the identity matrix
  -Transformations will be applied to the top
  -Push will put a COPY of the top on the top (WARNING: python list variables by default are refs, make a true copy)

11 Apr 2018
Relative Coordinate System
  -In a RCS we can apply transformations to individual or groups of shapes
  -Transformations will be applied to the 'world' or current coordinate system
  Drawing in a RCS
    1. Generate the polygons/edges
    2. Apply the current coordinate system to those points
    3. Draw the polygons/edges


28 Mar 2018
Backface Culling
  -Only draw the forward facing surfaces
  -vector N: surface normal; perpendicular to polygon
  -vector V: view vector; vector from surface to eye/camera

  1. Calculate N
    Normal Vector = A x B
    A = <P1 - P0>
    B = <P2 - P0>
  2. Find ϑ [angle between N and V]
    N * V = ||N|| ||V|| cosϑ
    V = <0,0,1>
    N = <x,y,z>
    N * V = z
  3. If -90 < ϑ < 90, draw polygon

20 Mar 2018
Vector Math review:
  (x,y,z) vs <x,y,z>
  -Magnitude
    ||A|| = √(Ax² + Ay² + Az²)
    *A normalized vector is the unit vector constructed from a different vector
    Â = 1 / ||A|| * <Ax, Ay, Az>

  -Dot Product:
    A * B  = ||A|| ||B|| cosϑ = AxBx + AyBy + AzBz

  -Cross product:
    Orthogonal to both vectors
    Magnitude = area of the parallelogram made by A and B
    A x B = ||A|| ||B|| sinϑ N [Unit vector] = <AyBz - AzBy, AzBx - AxBz, AxBy - AyBx>

  -Finding a vector between two points:
    PQ = <Q-P>
    QP = <P-Q>

  -Wireframe mesh: Shape definition is created by connecting edges between points on the surface

  -Polygon mesh: Shape definition is created by connecting points on the surface to create polygons (triangles, quadrilaterals)

  Edge matrix -> polygon matrix
    -Just group each point in the edge matrix into clumps of 3


13,14 Mar 2018
3D Shapes:
  -Box:
    Defining points: vertices
    Given:
      height (y), width(x), depth(z), P0 (top-left-front corner)
  -Sphere:
    Defining points: points on the surface
    Given:
      Center, radius
    Generate points by ROTATING the circle either around x or y
    ϕ = angle of circle rotation (0 -> 2π)
    ϑ = angle of circle construction (0 -> π)
    Sphere (rotate around x)
      x = rcosϑ + cx
      y = rsinϑcosϕ + cy
      z = rsinϑsinϕ + cz

    For semicircle:
      for ϑ: 0 -> 2π
        for ϕ: 0 -> π
          x = rcosϑ - cx
          y = rsinϑcosϕ + cy
          z = rsinϑsinϕ + cz
  -Torus:
    Defining points: surface points
    Given:
      (Cx, Cy, Cz), larger radius, smaller radius
    To generate points translate along a circle and rotate it
    If we move along x, rotate about y
    If we move along y, rotate about x


5 Mar 2018
Parametric Equations:
  -Define curves as systems of equation with a single independent variable (t)
    >x = f(t)
    >y = g(t)
  -For consistency, we will use the range [0,1] for t
  -General parametric framework:
    for t ε (0,100), t += step: [essentially, this counter (step) should be a float, but comps are bad at adding floats, so we are just using integers]
      x = f(t)
      y = g(t)
      add(x,y)
  -Circle r, (x0,y0):
    x = f(t) = rcosϑ + x0 = rcos(2πt) + x0
    y = g(t) = rsinϑ + y0 = rsin(2πt) + y0
  -Splines:
    -Curves that can be connected smoothly
    -We are only using cubic splines
    for t ε (0,1): t += step
    x = aₓt³ + bₓt² + cₓt + dₓ
    y = aᵧt³ + bᵧt² + cᵧt + dᵧ
  -Hermite Curves:
    -Given information:
      >P₀, P₁: endpoints
      >R₀, R₁: Rates of change at endpoints (essentially derivative)
      f(t) = at³ + bt² + ct + d [points]
      f'(t) = 3at² + 2bt + c [rates]
      when t = 0
        f(0) = d [P₀]
        f'(0) = c [R₀]
      when t = 1
        f(1) = a + b + c + d [P₁]
        f'(1) = 3a + 2b + c [R₁]
      Hermite Matrix [multiplied against coefficient matrix]:
        [0 0 0 1]
        [1 1 1 1]
        [0 0 1 0]
        [3 2 1 0]
      Inverse Hermite Matrix[multiplied against given matrix to find coefficient matrix]:
        [ 2 -2  1  1]
        [-3  3 -2 -1]
        [ 0  0  1  0]
        [ 1  0  0  0]


26-27 Feb 2018
Transformations:
  -Dilations (x,y,z) -> (ax, by, cz)
    >take the identity matrix, diagonal is a, b, c, 1 for dilation factors
    >dilations may translate your shape; you must translate it back to orig. position

  -Rotations (x,y) Rϑ -> (xcosϑ - ysinϑ , xcosϑ + xsinϑ  )
    >polar coordinates(ϕ is angle b/w origin-P1 and base axis)
      x = rcosϕ       x1 = rcos(ϑ + ϕ)                    y1 = rsin(ϕ + ϑ)
      y = rsinϕ            rcosϕcosϑ - rsinϕsinϑ               rsinϕcosϑ - rcosϕsinϑ
                      x  = xcosϑ - ysinϑ                  y  = ycosϑ + xsinϑ

    Rotation by ϑ around z-axis [R(ϑ,z)]:
      [cosϑ -sinϑ 0 0][x]   [xcosϑ - ysinϑ]
      [sinϑ cosϑ  0 0][y] = [ycosϑ + xsinϑ]
      [0    0     1 0][z]   [z]
      [0    0     0 1][1]   [1]

    Rotation by ϑ around x-axis [R(ϑ,x)]:
      y1 = ycosϑ - zsinϑ
      z1 = zcosϑ + ysinϑ

    Rotation by ϑ around y-axis [R(ϑ,x)]:
      x1 = xcosϑ + zsinϑ
      z1 = zcosϑ - xsinϑ

  -Combing Transformations
    E: edge mtx           R: rotation mtx
    T: translation mtx    S: scale mtx
    T * E0 = E1
    R * E1 = E2
    S * E2 = E3

    ∴E3 = (S * R * T) * E0
        !The final transform matrix is REVERSED from original order of transformations!
