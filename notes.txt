13,14 Mar 2018
3D Shapes:
  -Box:
    Defining points: vertices
    Given:
      height (y), width(x), depth(z), P0 (top-left-front corner)
  -Sphere:
    Defining points: points on the surface
    Given:
      Center, radius
    Generate points by ROTATING the circle either around x or y
    ϕ = angle of circle rotation (0 -> 2π)
    ϑ = angle of circle construction (0 -> π)
    Sphere (rotate around x)
      x = rcosϑ + cx
      y = rsinϑcosϕ + cy
      z = rsinϑsinϕ + cz

    For semicircle:
      for ϑ: 0 -> 2π
        for ϕ: 0 -> π
          x = rcosϑ - cx
          y = rsinϑcosϕ + cy
          z = rsinϑsinϕ + cz
  -Torus:
    Defining points: surface points
    Given:
      (Cx, Cy, Cz), larger radius, smaller radius
    To generate points translate along a circle and rotate it
    If we move along x, rotate about y
    If we move along y, rotate about x


5 Mar 2018
Parametric Equations:
  -Define curves as systems of equation with a single independent variable (t)
    >x = f(t)
    >y = g(t)
  -For consistency, we will use the range [0,1] for t
  -General parametric framework:
    for t ε (0,100), t += step: [essentially, this counter (step) should be a float, but comps are bad at adding floats, so we are just using integers]
      x = f(t)
      y = g(t)
      add(x,y)
  -Circle r, (x0,y0):
    x = f(t) = rcosϑ + x0 = rcos(2πt) + x0
    y = g(t) = rsinϑ + y0 = rsin(2πt) + y0
  -Splines:
    -Curves that can be connected smoothly
    -We are only using cubic splines
    for t ε (0,1): t += step
    x = aₓt³ + bₓt² + cₓt + dₓ
    y = aᵧt³ + bᵧt² + cᵧt + dᵧ
  -Hermite Curves:
    -Given information:
      >P₀, P₁: endpoints
      >R₀, R₁: Rates of change at endpoints (essentially derivative)
      f(t) = at³ + bt² + ct + d [points]
      f'(t) = 3at² + 2bt + c [rates]
      when t = 0
        f(0) = d [P₀]
        f'(0) = c [R₀]
      when t = 1
        f(1) = a + b + c + d [P₁]
        f'(1) = 3a + 2b + c [R₁]
      Hermite Matrix [multiplied against coefficient matrix]:
        [0 0 0 1]
        [1 1 1 1]
        [0 0 1 0]
        [3 2 1 0]
      Inverse Hermite Matrix[multiplied against given matrix to find coefficient matrix]:
        [ 2 -2  1  1]
        [-3  3 -2 -1]
        [ 0  0  1  0]
        [ 1  0  0  0]


26-27 Feb 2018
Transformations:
  -Dilations (x,y,z) -> (ax, by, cz)
    >take the identity matrix, diagonal is a, b, c, 1 for dilation factors
    >dilations may translate your shape; you must translate it back to orig. position

  -Rotations (x,y) Rϑ -> (xcosϑ - ysinϑ , xcosϑ + xsinϑ  )
    >polar coordinates(ϕ is angle b/w origin-P1 and base axis)
      x = rcosϕ       x1 = rcos(ϑ + ϕ)                    y1 = rsin(ϕ + ϑ)
      y = rsinϕ            rcosϕcosϑ - rsinϕsinϑ               rsinϕcosϑ - rcosϕsinϑ
                      x  = xcosϑ - ysinϑ                  y  = ycosϑ + xsinϑ

    Rotation by ϑ around z-axis [R(ϑ,z)]:
      [cosϑ -sinϑ 0 0][x]   [xcosϑ - ysinϑ]
      [sinϑ cosϑ  0 0][y] = [ycosϑ + xsinϑ]
      [0    0     1 0][z]   [z]
      [0    0     0 1][1]   [1]

    Rotation by ϑ around x-axis [R(ϑ,x)]:
      y1 = ycosϑ - zsinϑ
      z1 = zcosϑ + ysinϑ

    Rotation by ϑ around y-axis [R(ϑ,x)]:
      x1 = xcosϑ + zsinϑ
      z1 = zcosϑ - xsinϑ

  -Combing Transformations
    E: edge mtx           R: rotation mtx
    T: translation mtx    S: scale mtx
    T * E0 = E1
    R * E1 = E2
    S * E2 = E3

    ∴E3 = (S * R * T) * E0
        !The final transform matrix is REVERSED from original order of transformations!
